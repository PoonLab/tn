res <- clmp(t, nrates = 4)
#Establish a set of node ids coupled with collection dates
temp <- sapply(res$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
clusters <- data.frame(ID=ids, Time=times, Cluster=head(res$clusters, (length(res$clusters)+1)/2))
table(clusters$Cluster)
return(table(clusters$Cluster))
})
sings <- sapply(l, function(lsub) {unname(lsub["0"])})
maxs <- sapply(l, function(lsub) {unname(max(tail(lsub,-1)))})
means <-  sapply(l, function(lsub) {
cluA <- tail(lsub,-1)
cluB <- sum(cluA)-max(cluA)
cluB/(length(cluA)-1)
})
dfOld
dfOld <- rbind(dfOld,data.frame(sings,maxs,means))
dfOld
dfOld$sings
mean(dfOld$sings)
mean(dfOld$maxs)
mean(dfOld$means)
mean(subset(dfOld,sings<714))
mean(subset(dfOld,sings<714)$sings)
mean(subset(dfOld,sings<714)$maxs)
mean(subset(dfOld,sings<714)$means)
l <- lapply(1:10, function(nr){
####- TO-DO: Modulate parameters of clump to produce different sets of cluster data
res <- clmp(t, nrates = 5)
#Establish a set of node ids coupled with collection dates
temp <- sapply(res$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
clusters <- data.frame(ID=ids, Time=times, Cluster=head(res$clusters, (length(res$clusters)+1)/2))
table(clusters$Cluster)
return(table(clusters$Cluster))
})
sings <- sapply(l, function(lsub) {unname(lsub["0"])})
maxs <- sapply(l, function(lsub) {unname(max(tail(lsub,-1)))})
means <-  sapply(l, function(lsub) {
cluA <- tail(lsub,-1)
cluB <- sum(cluA)-max(cluA)
cluB/(length(cluA)-1)
})
dfOld <- data.frame(sings,maxs,means)
dfOld <- data.frame(sings,maxs,means)dfOld
dfOld
t
str(t)
t$tip.label
t$ID
#args = commandArgs(trailingOnly = T)
t <- read.tree("~/Data/Seattle/analysis/FTStsubB.nwk")
#Establish a set of node ids coupled with collection dates
temp <- sapply(t$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
t$Time <- times
t$ID <- ids
t$ID
t$time
t$Time
str(t)
t$tip.label[which(t$Time==max(t$Time))]
drop.tip(t, t$tip.label[which(t$Time==max(t$Time))])
tOld <- drop.tip(t, t$tip.label[which(t$Time==max(t$Time))])
t
tOld <- drop.tip(tOld, t$tip.label[which(t$Time==max(t$Time))])
tOld
tOld
tOld <- drop.tip(tOld, tOld$tip.label[which(tOld$Time==max(tOld$Time))])
tOld
hist(t$Time)
#args = commandArgs(trailingOnly = T)
t <- read.tree("~/Data/Seattle/analysis/FTStsubB.nwk")
#Establish a set of node ids coupled with collection dates
temp <- sapply(t$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
t$Time <- times
t$ID <- ids
tOld <- drop.tip(t, t$tip.label[which(t$Time>2012)])
tOld
#args = commandArgs(trailingOnly = T)
t <- read.tree("~/Data/Seattle/analysis/FTStsubB.nwk")
#Establish a set of node ids coupled with collection dates
temp <- sapply(t$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
t$Time <- times
t$ID <- ids
tOld <- drop.tip(t, t$tip.label[which(t$Time>2011)])
tOld
cutTime <- function(iT) {
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
while(length(maxTi)<63) {
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
}
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
while(length(maxTi)<63) {
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
}
}
cutTime <- function(iT) {
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
while(length(maxTi)<63) {
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
}
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
while(length(maxTi)<63) {
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
}
}
#args = commandArgs(trailingOnly = T)
t <- read.tree("~/Data/Seattle/analysis/FTStsubB.nwk")
#Establish a set of node ids coupled with collection dates
temp <- sapply(t$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
t$Time <- times
t$ID <- ids
tOld <- cutTime(t)
t
tOld
clusters <- data.frame(ID=ids, Time=times, Cluster=head(res$clusters, (length(res$clusters)+1)/2))
#A process which interprets clmp cluster data such that it is comparable to tn93 cluster data for scoring the effectiveness of clustering from tn93 Output.
#USAGE: Rscript clmpAnalysis FastTreeOutput.nwk
require(clmp)
#Expecting an ML tree from an alignmnent of HIV sequence data
#Expecting patient information in the format ID_Date
sizeCheck <- function(iT) {
while(length(maxTi)<63) {
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
}
return(iT)
}
cutTime <- function(iT) {
iT <- sizeCheck(iT)
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
iT <- sizeCheck(iT)
return(iT)
}
impTree <-function(f){
#args = commandArgs(trailingOnly = T)
t <- read.tree(f)
#Establish a set of node ids coupled with collection dates
temp <- sapply(t$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
t$Time <- times
t$ID <- ids
iT <- sizeCheck(t)
return(t)
}
f <- "~/Data/Seattle/analysis/FTStsubB.nwk"
nT <- impTree(f)
oT <- cutTime(nT)
nRes <- clmp(nT, nrates = 2)
oRes <- clmp(oT, nrates = 2)
nC <- data.frame(ID=nT$ID, Time=nT$Time, Cluster=head(res$clusters, (length(res$clusters)+1)/2))
oC <- data.frame(ID=oT$ID, Time=oT$Time, Cluster=head(res$clusters, (length(res$clusters)+1)/2))
#USAGE: Rscript clmpAnalysis FastTreeOutput.nwk
require(clmp)
#Expecting an ML tree from an alignmnent of HIV sequence data
#Expecting patient information in the format ID_Date
sizeCheck <- function(iT) {
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
while(length(maxTi)<63) {
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
}
return(iT)
}
cutTime <- function(iT) {
iT <- sizeCheck(iT)
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
iT <- sizeCheck(iT)
return(iT)
}
impTree <-function(f){
#args = commandArgs(trailingOnly = T)
t <- read.tree(f)
#Establish a set of node ids coupled with collection dates
temp <- sapply(t$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
t$Time <- times
t$ID <- ids
iT <- sizeCheck(t)
return(t)
}
f <- "~/Data/Seattle/analysis/FTStsubB.nwk"
nT <- impTree(f)
oT <- cutTime(nT)
nRes <- clmp(nT, nrates = 2)
oRes <- clmp(oT, nrates = 2)
nC <- data.frame(ID=nT$ID, Time=nT$Time, Cluster=head(res$clusters, (length(res$clusters)+1)/2))
oC <- data.frame(ID=oT$ID, Time=oT$Time, Cluster=head(res$clusters, (length(res$clusters)+1)/2))
nC <- data.frame(ID=nT$ID, Time=nT$Time, Cluster=head(nRes$clusters, (length(res$clusters)+1)/2))
oC <- data.frame(ID=oT$ID, Time=oT$Time, Cluster=head(oRes$clusters, (length(res$clusters)+1)/2))
nC <- data.frame(ID=nT$ID, Time=nT$Time, Cluster=head(nRes$clusters, (length(nRes$clusters)+1)/2))
oC <- data.frame(ID=oT$ID, Time=oT$Time, Cluster=head(oRes$clusters, (length(oRes$clusters)+1)/2))
nC
oC
max(oC$Time)
max(nC$Time)
require(clmp)
#Expecting an ML tree from an alignmnent of HIV sequence data
#Expecting patient information in the format ID_Date
sizeCheck <- function(iT) {
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
while(length(maxTi)<63) {
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
}
return(iT)
}
cutTime <- function(iT) {
iT <- sizeCheck(iT)
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
iT <- sizeCheck(iT)
return(iT)
}
impTree <-function(f){
#args = commandArgs(trailingOnly = T)
t <- read.tree(f)
#Establish a set of node ids coupled with collection dates
temp <- sapply(t$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
t$Time <- times
t$ID <- ids
t <- sizeCheck(t)
return(t)
}
f <- "~/Data/Seattle/analysis/FTStsubB.nwk"
nT <- impTree(f)
oT <- cutTime(nT)
nRes <- clmp(nT, nrates = 2)
oRes <- clmp(oT, nrates = 2)
nC <- data.frame(ID=nT$ID, Time=nT$Time, Cluster=head(nRes$clusters, (length(nRes$clusters)+1)/2))
oC <- data.frame(ID=oT$ID, Time=oT$Time, Cluster=head(oRes$clusters, (length(oRes$clusters)+1)/2))
iC <- nC
niC <- subset(iC, Time==max(iC$Time))
x <- niC[[1]]
iClu <- subset(iC, cluster)
x
niC
x <- niC[1,]
x
iC <- nC
niC <- subset(iC, Time==max(iC$Time) & Cluster>0)
x <- niC[1,]
iClu <- subset(iC, cluster)
x
niC
iClu <- subset(iC, Cluster==x$Cluster & Time<max(iC$Time))
iClu
require(clmp)
#Expecting an ML tree from an alignmnent of HIV sequence data
#Expecting patient information in the format ID_Date
impTN93Dist <- function(iFile) {
#From the input file, a tn93 output file. This
idf <- read.csv(iFile, stringsAsFactors = F)
temp1 <- sapply(idf$ID1, function(x) (strsplit(x,'_')[[1]])[[1]])
temp2 <- sapply(idf$ID1, function(x) (strsplit(x,'_')[[1]])[[2]])
temp3 <- sapply(idf$ID2, function(x) (strsplit(x,'_')[[1]])[[1]])
temp4 <- sapply(idf$ID2, function(x) (strsplit(x,'_')[[1]])[[2]])
#Create data frame of edges (ie. Vertex interactions)
el <- data.frame(ID1=as.character(temp1), t1=as.numeric(temp2), ID2=as.character(temp3), t2=as.numeric(temp4),
Distance = as.numeric(idf$Distance), stringsAsFactors= F)
el$tMax <- pmax(el$t1,el$t2)
el$tDiff <- abs(el$t1-el$t2)
##TO-DO: Add mtD meta data info here
#Create data frame of Vertex (ie. Case by case data)
vl <- unique(data.frame(ID = c(el$ID1, el$ID2), Time = c(el$t1, el$t2), stringsAsFactors=F))
#Order both list elements by time point
g <- list(v=vl[order(vl$Time),], e=el[order(el$tMax),], f=el[order(el$tMax),])
}
sizeCheck <- function(iT) {
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
while(length(maxTi)<63) {
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
}
return(iT)
}
cutTime <- function(iT) {
iT <- sizeCheck(iT)
maxT <- max(iT$Time)
maxTi <- which(iT$Time==maxT)
iT <- drop.tip(iT, maxTi)
iT$Time <- iT$Time[-maxTi]
iT$ID <- iT$ID[-maxTi]
iT <- sizeCheck(iT)
return(iT)
}
impTree <-function(f){
#args = commandArgs(trailingOnly = T)
t <- read.tree(f)
#Establish a set of node ids coupled with collection dates
temp <- sapply(t$tip.label, function(x) strsplit(x, '_')[[1]])
ids <- temp[1,]
times <- as.numeric(temp[2,])
t$Time <- times
t$ID <- ids
t <- sizeCheck(t)
return(t)
}
f <- "~/Data/Seattle/analysis/FTStsubB.nwk"
iFile <- "~/Data/Seattle/tn93StsubB.txt"
nT <- impTree(f)
oT <- cutTime(nT)
nRes <- clmp(nT, nrates = 2)
oRes <- clmp(oT, nrates = 2)
nC <- data.frame(ID=nT$ID, Time=nT$Time, Cluster=head(nRes$clusters, (length(nRes$clusters)+1)/2))
oC <- data.frame(ID=oT$ID, Time=oT$Time, Cluster=head(oRes$clusters, (length(oRes$clusters)+1)/2))
iC <- nC
niC <- subset(iC, Time==max(iC$Time) & Cluster>0)
x <- niC[1,]
iClu <- subset(iC, Cluster==x$Cluster & Time<max(iC$Time))
impTN93Dist <- function(iFile) {
#From the input file, a tn93 output file. This
idf <- read.csv(iFile, stringsAsFactors = F)
temp1 <- sapply(idf$ID1, function(x) (strsplit(x,'_')[[1]])[[1]])
temp3 <- sapply(idf$ID2, function(x) (strsplit(x,'_')[[1]])[[1]])
#Create data frame of edges (ie. Vertex interactions)
el <- data.frame(ID1=as.character(temp1), ID2=as.character(temp3),
Distance = as.numeric(idf$Distance), stringsAsFactors= F)
return(el)
}
Dist <- impTN93Dist(iFile)
Dist
iClu
max(iClu$Time)
iDist <- subset(Dist, ID1%in%x$ID | ID2%in%x$ID)
iDist
x
iClus
iClu
iC <- nC
niC <- subset(iC, Time==max(iC$Time) & Cluster>0)
x <- niC[1,]
iClu <- subset(iC, Cluster==x$Cluster & Time<max(iC$Time))
iDist <- subset(Dist, ID1%in%x$ID | ID2%in%x$ID)
iDist <- subset(iDist, ID1%in%iClu$ID | ID2%in%iClu$ID)
iDist
iMin <- subset(iDist, Distance==min(Distance))
iMin <- subset(iDist, Distance==min(Distance))[[1]]
iMin
iMin <- subset(iDist, Distance==min(Distance))[1,]
iMin
c("Blah", "Blee") - "Blah"
?remove()
rm("Blah",  c("Blah", "Blee"))
iC <- nC
niC <- subset(iC, Time==max(iC$Time) & Cluster>0)
x <- niC[1,]
ioNeighb <- subset(iC, Cluster==x$Cluster & Time<max(iC$Time))
iDist <- subset(Dist, ID1%in%x$ID | ID2%in%x$ID)
iDist <- subset(iDist, ID1%in%ioNeighb$ID | ID2%in%ioNeighb$ID)
iDist$ID <- c(iDist$ID1,iDist$ID2)[c(iDist$ID1,iDist$ID2)%in%ioNeighb$ID]
iDist$ID
iDist$ID
iDist
iDist <- iDist[,c("Distance", "ID")]
iDist
iMin <- subset(iDist, Distance==min(Distance))[1,]
iMin <- subset(iDist, Distance==min(Distance))[1,]$ID
iMin
subset(ioNeighb, ID%in%iMin)
subset(ioNeighb, ID%in%iMin)$Cluster
niC <- subset(iC, Time==max(iC$Time) & Cluster>0)
niC
iC <- nC
niC <- subset(iC, Time==max(iC$Time) & Cluster>0)
closeNeighbs <- sapply(niC, function(x){
x <- niC[1,]
ioNeighb <- subset(iC, Cluster==x$Cluster & Time<max(iC$Time))
iDist <- subset(Dist, ID1%in%x$ID | ID2%in%x$ID)
iDist <- subset(iDist, ID1%in%ioNeighb$ID | ID2%in%ioNeighb$ID)
iDist$ID <- c(iDist$ID1,iDist$ID2)[c(iDist$ID1,iDist$ID2)%in%ioNeighb$ID]
iDist <- iDist[,c("Distance", "ID")]
iMin <- subset(iDist, Distance==min(Distance))[1,]$ID
return(iMin)
})
niC
closeNeighbs
iC <- nC
niC <- subset(iC, Time==max(iC$Time) & Cluster>0)
closeNeighbs <- sapply(niC, function(i){
x <- niC[i,]
ioNeighb <- subset(iC, Cluster==x$Cluster & Time<max(iC$Time))
iDist <- subset(Dist, ID1%in%x$ID | ID2%in%x$ID)
iDist <- subset(iDist, ID1%in%ioNeighb$ID | ID2%in%ioNeighb$ID)
iDist$ID <- c(iDist$ID1,iDist$ID2)[c(iDist$ID1,iDist$ID2)%in%ioNeighb$ID]
iDist <- iDist[,c("Distance", "ID")]
iMin <- subset(iDist, Distance==min(Distance))[1,]$ID
return(iMin)
})
close(Neighbs)
closeNeighbs
i <- 1
x <- niC[i,]
ioNeighb <- subset(iC, Cluster==x$Cluster & Time<max(iC$Time))
iDist <- subset(Dist, ID1%in%x$ID | ID2%in%x$ID)
iDist <- subset(iDist, ID1%in%ioNeighb$ID | ID2%in%ioNeighb$ID)
iDist$ID <- c(iDist$ID1,iDist$ID2)[c(iDist$ID1,iDist$ID2)%in%ioNeighb$ID]
iDist <- iDist[,c("Distance", "ID")]
iMin <- subset(iDist, Distance==min(Distance))[1,]$ID
iMin
niC
x
x$"KY"
x$ID <- "KY"
iDist <- subset(Dist, ID1%in%x$ID | ID2%in%x$ID)
iDist <- subset(iDist, ID1%in%ioNeighb$ID | ID2%in%ioNeighb$ID)
iDist$ID <- c(iDist$ID1,iDist$ID2)[c(iDist$ID1,iDist$ID2)%in%ioNeighb$ID]
iDist <- iDist[,c("Distance", "ID")]
iMin <- subset(iDist, Distance==min(Distance))[1,]$ID
iDist
iC <- nC
niC <- subset(iC, Time==max(iC$Time) & Cluster>0)
closeNeighbs <- sapply(1:nrow(niC), function(i){
x <- niC[i,]
ioNeighb <- subset(iC, Cluster==x$Cluster & Time<max(iC$Time))
iDist <- subset(Dist, ID1%in%x$ID | ID2%in%x$ID)
iDist <- subset(iDist, ID1%in%ioNeighb$ID | ID2%in%ioNeighb$ID)
iDist$ID <- c(iDist$ID1,iDist$ID2)[c(iDist$ID1,iDist$ID2)%in%ioNeighb$ID]
iDist <- iDist[,c("Distance", "ID")]
if(nrow(iDist)>0) {
iMin <- subset(iDist, Distance==min(Distance))[1,]$ID
} else {
iMin <- NA
}
return(iMin)
})
closeNeighbs
iC <- nC
niC <- subset(iC, Time==max(iC$Time) & Cluster>0)
closeNeighbs <- sapply(1:nrow(niC), function(i){
x <- niC[i,]
ioNeighb <- subset(iC, Cluster==x$Cluster & Time<max(iC$Time))
iDist <- subset(Dist, ID1%in%x$ID | ID2%in%x$ID)
iDist <- subset(iDist, ID1%in%ioNeighb$ID | ID2%in%ioNeighb$ID)
iDist$ID <- c(iDist$ID1,iDist$ID2)[c(iDist$ID1,iDist$ID2)%in%ioNeighb$ID]
iDist <- iDist[,c("Distance", "ID")]
if(nrow(iDist)>0) {
iMin <- subset(iDist, Distance==min(Distance))[1,]$ID
} else {
iMin <- "Blah"
}
return(iMin)
})
closeNeighbs
nrow(niC)
length(closeNeighbs)
oC
subset(oC, ID%in%closeNeighbs)
table(subset(oC, ID%in%closeNeighbs)$Cluster)
table(oC$Cluster)
